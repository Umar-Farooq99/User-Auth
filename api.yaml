openapi: 3.0.3
info:
  title: User Auth and Blog Api
  description: This the Documentation of of User Authentication System
  contact:
    email: apiteam@swagger.io
  license:
    name: Nodejs 18.16.0
    url: https://nodejs.org/en
  version: 1.0.11
servers:
  - url: http://localhost:5000
tags:
  - name: User
    description: Operaation about User
  - name: Blog
    description: Operation about blog
paths:
  /register:
    post:
      tags:
        - User
      summary: SignUp
      description: Create An New Account
      operationId: User Created
      requestBody:
        description: Create an Account for new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: User Already Exist
        "500":
          description: internet server error
      security:
        - user_auth:
            - write:create user
            - read:fetch user
  /login:
    post:
      tags:
        - User
      summary: SignIn
      description: User can login
      operationId: User login
      parameters:
        - name: username
          in: body
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: body
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          headers:
            x-access-token:
              description: calls per hour allowed by the user
              schema:
                type: string

            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid Username/Password
      security:
        - user_auth:
            - write:create user
            - read:fetch user
  /All:
    get:
      tags:
        - User
      summary: Finds All Login User
      description: You can find list of All Users
      operationId: Listed User
      parameters:
        - name: all
          in: path
          description: "The name that needs to be fetched all user. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: User Not Found
      security:
        - user_auth:
            - write:create user
            - read:fetch user
  /current:
    get:
      tags:
        - User
      summary: Currently login User
      description: Currently sign-In User
      parameters:
        - name: Current
          in: path
          description: "to find the currently login user. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid tag value
      security:
        - user_auth:
            - write:create user
            - read:fetch
  /:
    post:
      tags:
        - Blog
      summary: Write a Blog
      description: You can write a blog post here
      operationId: Blog Posted
      requestBody:
        description: Write  a blog with title body and author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/blog"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blog"
        "401":
          description: Unathorized Access
        "500":
          description: internal server error
      security:
        - api_key: []
        - user_auth:
            - write:blogs
            - read:blogs
    get:
      tags:
        - Blog
      summary: Get personal blog
      description: get the blogs posted by login user
      operationId: list of blogs posted by one user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                item:
                $ref: "#/components/schemas/blog"
        "405":
          description: Invalid input
      security:
        - user_auth:
            - write:blogs
            - read:blogs
  /all:
    get:
      tags:
        - Blog
      summary: Get  the blog posted by all user
      description: Access to the all blogs
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blog"
      security:
        - user_auth:
            - write:blogs
            - read:blogs
  /id:
    patch:
      tags:
        - Blog
      summary: update the existing blog by id
      description: you can edit blog partially
      operationId: updated
      requestBody:
        description: Write  a blog with title body and author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/blog"
        required: true
      responses:
        "200":
          description: successful operation
      security:
        - user_auth:
            - write:blogs
            - read:blogs
        - api_key: []
    delete:
      tags:
        - Blog
      summary: Delete the blog by id
      description: get blog by id and delete  it
      operationId: Deleted
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      security:
        - user_auth:
            - write:blogs
            - read:blogs
        - api_key: []
components:
  schemas:
    blog:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 12
        author:
          type: string
          example: Umar/Ali/Saad
        title:
          type: string
          example: technology
        body:
          type: string
          description: Order Status
          example: write the blog body here
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        role:
          type: string
          description: User Status
          example: admin/user
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:5000/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
